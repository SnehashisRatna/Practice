import heapq
























































































































































































































































































































































































































































































































































































































































































from collections import defaultdict, Counter

# Node class for Huffman Tree
class Node:
    def __init__(self, freq, symbol, left=None, right=None):
        self.freq = freq
        self.symbol = symbol
        self.left = left
        self.right = right
        self.huff = ''

    def __lt__(self, other):
        return self.freq < other.freq

# Function to build Huffman Tree
def build_tree(data):
    frequency = Counter(data)
    heap = [Node(freq, sym) for sym, freq in frequency.items()]
    heapq.heapify(heap)

    while len(heap) > 1:
        left = heapq.heappop(heap)
        right = heapq.heappop(heap)
        left.huff = '0'
        right.huff = '1'
        new_node = Node(left.freq + right.freq, left.symbol + right.symbol, left, right)
        heapq.heappush(heap, new_node)

    return heap[0]

# Function to generate Huffman codes
def generate_codes(node, current_code='', codes=defaultdict(str)):
    if node is None:
        return

    if not node.left and not node.right:
        codes[node.symbol] = current_code

    generate_codes(node.left, current_code + '0', codes)
    generate_codes(node.right, current_code + '1', codes)

    return codes

# Function to encode data
def huffman_encode(data):
    root = build_tree(data)
    huffman_codes = generate_codes(root)
    encoded_data = ''.join([huffman_codes[char] for char in data])

    return huffman_codes, encoded_data

# Main program
if __name__ == "__main__":
    data = "this is an example for huffman encoding"
    print("Input Data:", data)

    huffman_codes, encoded_data = huffman_encode(data)
    print("Huffman Codes:", huffman_codes)
    print("Encoded Data:", encoded_data)
