import numpy as np
























































































































































































































































































































































































































































































































































































































































































def strassen(A, B):
    # Base case: when the matrices are 1x1
    if A.shape[0] == 1:
        return A * B
    
    # Splitting the matrices into quadrants
    mid = A.shape[0] // 2
    A11, A12, A21, A22 = A[:mid, :mid], A[:mid, mid:], A[mid:, :mid], A[mid:, mid:]
    B11, B12, B21, B22 = B[:mid, :mid], B[:mid, mid:], B[mid:, :mid], B[mid:, mid:]
    
    # Calculating the 7 products
    P1 = strassen(A11 + A22, B11 + B22)
    P2 = strassen(A21 + A22, B11)
    P3 = strassen(A11, B12 - B22)
    P4 = strassen(A22, B21 - B11)
    P5 = strassen(A11 + A12, B22)
    P6 = strassen(A21 - A11, B11 + B12)
    P7 = strassen(A12 - A22, B21 + B22)
    
    # Combining the products to get the final quadrants
    C11 = P1 + P4 - P5 + P7
    C12 = P3 + P5
    C21 = P2 + P4
    C22 = P1 + P3 - P2 + P6
    
    # Combining the quadrants into a single matrix
    C = np.vstack((np.hstack((C11, C12)), np.hstack((C21, C22))))
    return C

# Function to pad matrices to be of size 2^k x 2^k
def next_power_of_2(n):
    return 1 if n == 0 else 2**(n - 1).bit_length()

def pad_matrix(matrix, size):
    padded_matrix = np.zeros((size, size))
    padded_matrix[:matrix.shape[0], :matrix.shape[1]] = matrix
    return padded_matrix

# Main function to multiply two matrices using Strassen's algorithm
if __name__ == "__main__":
    # Example matrices
    A = np.array([[1, 2], [3, 4]])
    B = np.array([[5, 6], [7, 8]])
    
    # Padding matrices to be of size 2^k x 2^k
    new_size = next_power_of_2(max(A.shape + B.shape))
    A_padded = pad_matrix(A, new_size)
    B_padded = pad_matrix(B, new_size)
    
    # Multiplying the matrices using Strassen's algorithm
    C_padded = strassen(A_padded, B_padded)
    
    # Removing the padding
    C = C_padded[:A.shape[0], :A.shape[1]]
    
    print("Matrix A:")
    print(A)
    print("\nMatrix B:")
    print(B)
    print("\nProduct (using Strassen's algorithm):")
    print(C)
